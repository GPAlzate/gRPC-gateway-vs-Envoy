// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/recruiter.proto

package recruiter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Empty message for rpc's that require no request (clear and list)
type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1aebc5185a9997, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

//*
// Represents a company with a name, code, number of job openings,
// and brokerage status
type Company struct {
	// unique id for each company
	CompanyCode int32 `protobuf:"varint,1,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	// name of the company
	CompanyName string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName,omitempty"`
	// how many jobs are available
	NumOpenings int32 `protobuf:"varint,3,opt,name=numOpenings,proto3" json:"numOpenings,omitempty"`
	// determines if the company is brokerage
	IsBrokerage          bool     `protobuf:"varint,4,opt,name=isBrokerage,proto3" json:"isBrokerage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1aebc5185a9997, []int{1}
}

func (m *Company) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Company.Unmarshal(m, b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Company.Marshal(b, m, deterministic)
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return xxx_messageInfo_Company.Size(m)
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetCompanyCode() int32 {
	if m != nil {
		return m.CompanyCode
	}
	return 0
}

func (m *Company) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Company) GetNumOpenings() int32 {
	if m != nil {
		return m.NumOpenings
	}
	return 0
}

func (m *Company) GetIsBrokerage() bool {
	if m != nil {
		return m.IsBrokerage
	}
	return false
}

//*
// A request made by a client who specifies a unique company code. Fields 2-4
// are set when updating a company's details.
type CompanyRequest struct {
	// unique id for each company
	CompanyCode int32 `protobuf:"varint,1,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	// name of the company
	CompanyName string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName,omitempty"`
	// how many jobs are available
	NumOpenings int32 `protobuf:"varint,3,opt,name=numOpenings,proto3" json:"numOpenings,omitempty"`
	// determines if the company is brokerage
	IsBrokerage bool `protobuf:"varint,4,opt,name=isBrokerage,proto3" json:"isBrokerage,omitempty"`
	// True if transaction is successful, false otherwise
	Ok                   bool     `protobuf:"varint,5,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompanyRequest) Reset()         { *m = CompanyRequest{} }
func (m *CompanyRequest) String() string { return proto.CompactTextString(m) }
func (*CompanyRequest) ProtoMessage()    {}
func (*CompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1aebc5185a9997, []int{2}
}

func (m *CompanyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanyRequest.Unmarshal(m, b)
}
func (m *CompanyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanyRequest.Marshal(b, m, deterministic)
}
func (m *CompanyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyRequest.Merge(m, src)
}
func (m *CompanyRequest) XXX_Size() int {
	return xxx_messageInfo_CompanyRequest.Size(m)
}
func (m *CompanyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyRequest proto.InternalMessageInfo

func (m *CompanyRequest) GetCompanyCode() int32 {
	if m != nil {
		return m.CompanyCode
	}
	return 0
}

func (m *CompanyRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *CompanyRequest) GetNumOpenings() int32 {
	if m != nil {
		return m.NumOpenings
	}
	return 0
}

func (m *CompanyRequest) GetIsBrokerage() bool {
	if m != nil {
		return m.IsBrokerage
	}
	return false
}

func (m *CompanyRequest) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

//*
// A response sent by a server, returning a `Company` message and a boolean field
// indicating a successful transaction
type CompanyResponse struct {
	// The deleted, created, or retrieved company
	Company *Company `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	// True if transaction is successful, false otherwise
	Ok                   bool     `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompanyResponse) Reset()         { *m = CompanyResponse{} }
func (m *CompanyResponse) String() string { return proto.CompactTextString(m) }
func (*CompanyResponse) ProtoMessage()    {}
func (*CompanyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1aebc5185a9997, []int{3}
}

func (m *CompanyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanyResponse.Unmarshal(m, b)
}
func (m *CompanyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanyResponse.Marshal(b, m, deterministic)
}
func (m *CompanyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyResponse.Merge(m, src)
}
func (m *CompanyResponse) XXX_Size() int {
	return xxx_messageInfo_CompanyResponse.Size(m)
}
func (m *CompanyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyResponse proto.InternalMessageInfo

func (m *CompanyResponse) GetCompany() *Company {
	if m != nil {
		return m.Company
	}
	return nil
}

func (m *CompanyResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Void)(nil), "recruiter.Void")
	proto.RegisterType((*Company)(nil), "recruiter.Company")
	proto.RegisterType((*CompanyRequest)(nil), "recruiter.CompanyRequest")
	proto.RegisterType((*CompanyResponse)(nil), "recruiter.CompanyResponse")
}

func init() { proto.RegisterFile("proto/recruiter.proto", fileDescriptor_3c1aebc5185a9997) }

var fileDescriptor_3c1aebc5185a9997 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcb, 0x6e, 0x23, 0x45,
	0x14, 0x55, 0xd9, 0x99, 0x78, 0x5c, 0x1e, 0x3b, 0x51, 0x49, 0x06, 0x4f, 0x6b, 0x90, 0x2e, 0x16,
	0x8b, 0xc8, 0x9a, 0xb8, 0x3d, 0x1e, 0xb2, 0x89, 0xc4, 0xc2, 0x8f, 0x08, 0xcd, 0x80, 0x88, 0xd4,
	0x99, 0x41, 0x82, 0x5d, 0xd9, 0x7d, 0xd3, 0x2e, 0xd2, 0x5d, 0xd5, 0x54, 0x55, 0x8f, 0x89, 0x10,
	0x12, 0xe2, 0x03, 0x90, 0x30, 0x12, 0x0b, 0xd8, 0xb0, 0x9c, 0x3f, 0xe0, 0x43, 0xf8, 0x02, 0x24,
	0x58, 0xf3, 0x0b, 0xc8, 0xd5, 0x6e, 0xd3, 0x79, 0x28, 0x0b, 0x58, 0xc0, 0xca, 0xf6, 0xb9, 0xc7,
	0xe7, 0x9e, 0x7b, 0x6e, 0x75, 0x35, 0x6d, 0xa7, 0x5a, 0x59, 0xe5, 0x6b, 0x9c, 0xeb, 0x4c, 0x58,
	0xd4, 0x7d, 0xf7, 0x9b, 0xd5, 0xb7, 0x80, 0xf7, 0x28, 0x52, 0x2a, 0x8a, 0xd1, 0xe7, 0xa9, 0xf0,
	0xb9, 0x94, 0xca, 0x72, 0x2b, 0x94, 0x34, 0x39, 0xd1, 0x7b, 0xec, 0x3e, 0xe6, 0x87, 0x11, 0xca,
	0x43, 0xb3, 0xe4, 0x51, 0x84, 0xda, 0x57, 0xa9, 0x63, 0xdc, 0x64, 0x77, 0x77, 0xe9, 0xce, 0xc7,
	0x4a, 0x84, 0xdd, 0xef, 0x08, 0xad, 0x4d, 0x54, 0x92, 0x72, 0x79, 0xc9, 0x80, 0x36, 0xe6, 0xf9,
	0xd7, 0x89, 0x0a, 0xb1, 0x43, 0x80, 0x1c, 0xdc, 0x0b, 0xca, 0x50, 0x89, 0xf1, 0x11, 0x4f, 0xb0,
	0x53, 0x01, 0x72, 0x50, 0x0f, 0xca, 0xd0, 0x9a, 0x21, 0xb3, 0xe4, 0x34, 0x45, 0x29, 0x64, 0x64,
	0x3a, 0xd5, 0x5c, 0xa3, 0x04, 0xad, 0x19, 0xc2, 0x8c, 0xb5, 0xba, 0x40, 0xcd, 0x23, 0xec, 0xec,
	0x00, 0x39, 0xb8, 0x1f, 0x94, 0xa1, 0xee, 0x6b, 0x42, 0x5b, 0x1b, 0x4f, 0x01, 0x7e, 0x9e, 0xa1,
	0xb1, 0xff, 0x17, 0x6b, 0xac, 0x45, 0x2b, 0xea, 0xa2, 0x73, 0xcf, 0x15, 0x2a, 0xea, 0xa2, 0x7b,
	0x4a, 0xf7, 0xb6, 0x4e, 0x4d, 0xaa, 0xa4, 0x41, 0xf6, 0x98, 0xd6, 0x36, 0x5d, 0x9d, 0xcd, 0xc6,
	0x90, 0xf5, 0xff, 0xde, 0x69, 0x41, 0x2e, 0x28, 0x1b, 0xc1, 0x4a, 0x21, 0x38, 0xfc, 0xb9, 0x46,
	0xeb, 0x41, 0x41, 0x67, 0x3f, 0x11, 0xda, 0x9c, 0x68, 0xe4, 0x16, 0x8b, 0x1d, 0xdd, 0x22, 0xe6,
	0x79, 0xb7, 0x34, 0xd8, 0xb8, 0xe9, 0x7e, 0xba, 0x1a, 0x4d, 0x58, 0xf3, 0x2c, 0x4b, 0x12, 0xae,
	0x2f, 0x8f, 0xc1, 0xa2, 0xb1, 0xde, 0xfe, 0x14, 0xcd, 0x5c, 0x0b, 0x77, 0x36, 0xe0, 0x05, 0x1a,
	0xfb, 0x1c, 0x68, 0x75, 0x38, 0x18, 0xb0, 0x87, 0x74, 0xef, 0xf4, 0x15, 0xea, 0xa5, 0x16, 0x16,
	0x0d, 0x7c, 0x72, 0x72, 0xf2, 0x82, 0xed, 0xd2, 0x9d, 0x1f, 0x2b, 0xa4, 0xf6, 0xcd, 0xaf, 0xbf,
	0x7f, 0x5f, 0x69, 0x75, 0xeb, 0xbe, 0xc6, 0x48, 0x18, 0x8b, 0xfa, 0x98, 0xf4, 0xd8, 0x9f, 0x84,
	0x36, 0x02, 0xe4, 0x61, 0xe1, 0xed, 0xe1, 0x6d, 0x3e, 0xdc, 0xfe, 0xee, 0xb4, 0xf8, 0x9a, 0xac,
	0x46, 0xdf, 0x12, 0x76, 0xb8, 0xc1, 0x41, 0x18, 0x90, 0xca, 0x82, 0x90, 0x60, 0x17, 0x08, 0x21,
	0xb7, 0x7c, 0xc6, 0x0d, 0xf6, 0x61, 0xe2, 0x4e, 0x31, 0x84, 0x18, 0xa3, 0x45, 0xaf, 0x57, 0xd0,
	0x97, 0xc2, 0x2e, 0xe0, 0xcb, 0xd2, 0x51, 0xf8, 0x0a, 0x42, 0x85, 0xb9, 0x06, 0x7e, 0x21, 0x8c,
	0x7d, 0xfb, 0xf9, 0x13, 0x5a, 0x7d, 0x77, 0x30, 0x60, 0x3d, 0x0a, 0xa5, 0xf1, 0x42, 0x3c, 0xe7,
	0x59, 0x6c, 0x61, 0xb9, 0x40, 0x99, 0x8b, 0x0a, 0x19, 0x5d, 0x99, 0x77, 0x9f, 0xb5, 0xfc, 0x2b,
	0xc2, 0x6c, 0x41, 0x9b, 0x2f, 0xd3, 0xb0, 0xb4, 0x8e, 0x7f, 0x38, 0x32, 0x38, 0x7d, 0xcf, 0x6b,
	0xfb, 0x99, 0x93, 0xbb, 0xda, 0x66, 0x9d, 0xed, 0xd7, 0x15, 0xda, 0x9c, 0xba, 0x49, 0xff, 0x65,
	0xab, 0x5f, 0xc8, 0x6a, 0xf4, 0x03, 0x61, 0x47, 0xcf, 0xa6, 0xb0, 0xe0, 0x79, 0x2a, 0x33, 0x44,
	0x09, 0xc5, 0x22, 0x31, 0x84, 0x73, 0xa5, 0x61, 0xa1, 0x32, 0x23, 0x64, 0xf4, 0x1f, 0xa4, 0xfc,
	0x66, 0xaf, 0xed, 0xe7, 0xdd, 0xae, 0x85, 0x1d, 0xd0, 0xe6, 0x87, 0xc2, 0xd8, 0xdc, 0x81, 0x40,
	0xc3, 0xf6, 0x4a, 0x63, 0xae, 0x2f, 0xaf, 0x3b, 0xe7, 0x66, 0x4e, 0xfc, 0x01, 0xa3, 0xfe, 0xbc,
	0x10, 0x18, 0x10, 0x36, 0xa6, 0xad, 0x49, 0x8c, 0x5c, 0xdf, 0x21, 0x7a, 0x1d, 0xe8, 0xb6, 0x9c,
	0xd2, 0xfd, 0xde, 0xae, 0x3f, 0x5f, 0xff, 0x75, 0xfc, 0x07, 0x59, 0x8d, 0x7e, 0x23, 0x6c, 0x4a,
	0xdf, 0x3b, 0x13, 0x49, 0x1a, 0x23, 0x84, 0x98, 0x28, 0x98, 0x04, 0x2f, 0xa7, 0xc0, 0xd3, 0xd4,
	0xa5, 0xb9, 0x6d, 0x09, 0x0b, 0xa1, 0x85, 0x8c, 0x40, 0x49, 0xf8, 0x80, 0xc7, 0x62, 0xa6, 0x35,
	0xa4, 0x31, 0xb7, 0xe7, 0x4a, 0x27, 0xc3, 0xea, 0x93, 0xfe, 0xa0, 0x47, 0xc8, 0x70, 0x9f, 0xa7,
	0x69, 0x2c, 0xe6, 0xee, 0x7a, 0xf6, 0x3f, 0x33, 0x4a, 0x1e, 0xdf, 0x40, 0x82, 0xa3, 0x3c, 0xdb,
	0x3e, 0x7d, 0x27, 0x40, 0x9b, 0x69, 0x89, 0x61, 0x9e, 0xe8, 0xfa, 0x09, 0x79, 0x36, 0xbd, 0xb6,
	0x8a, 0x7e, 0x91, 0x6f, 0xf0, 0x16, 0xad, 0x1e, 0x0d, 0x86, 0xec, 0x0d, 0xfa, 0xe0, 0x0c, 0xf5,
	0x2b, 0xd4, 0x70, 0xa2, 0xb5, 0xd2, 0xdb, 0xf2, 0xa3, 0x75, 0xf9, 0x29, 0x6b, 0xd3, 0xc6, 0x98,
	0x87, 0xf0, 0x3e, 0xb7, 0xb8, 0xe4, 0x97, 0x45, 0x75, 0xb6, 0xeb, 0xde, 0x14, 0x4f, 0xff, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x40, 0x8e, 0x83, 0x99, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecruiterClient is the client API for Recruiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecruiterClient interface {
	// Creates a company from a company message. Returns created company with
	// ok response
	CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*CompanyResponse, error)
	// Reads a company, queried by company code. Returns company with ok response
	ReadCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error)
	// Updates a company's name, number of openings, or brokerage. Returns the
	// updated company
	UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error)
	// Deletes a company queried by id and returns the deleted company
	DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error)
	/// Lists all the registered companies. Returns a stream of companies
	ListCompanies(ctx context.Context, in *Void, opts ...grpc.CallOption) (Recruiter_ListCompaniesClient, error)
	/// Removes all registered companies
	ClearCompanies(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type recruiterClient struct {
	cc *grpc.ClientConn
}

func NewRecruiterClient(cc *grpc.ClientConn) RecruiterClient {
	return &recruiterClient{cc}
}

func (c *recruiterClient) CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.cc.Invoke(ctx, "/recruiter.Recruiter/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruiterClient) ReadCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.cc.Invoke(ctx, "/recruiter.Recruiter/ReadCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruiterClient) UpdateCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.cc.Invoke(ctx, "/recruiter.Recruiter/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruiterClient) DeleteCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := c.cc.Invoke(ctx, "/recruiter.Recruiter/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruiterClient) ListCompanies(ctx context.Context, in *Void, opts ...grpc.CallOption) (Recruiter_ListCompaniesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Recruiter_serviceDesc.Streams[0], "/recruiter.Recruiter/ListCompanies", opts...)
	if err != nil {
		return nil, err
	}
	x := &recruiterListCompaniesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recruiter_ListCompaniesClient interface {
	Recv() (*CompanyResponse, error)
	grpc.ClientStream
}

type recruiterListCompaniesClient struct {
	grpc.ClientStream
}

func (x *recruiterListCompaniesClient) Recv() (*CompanyResponse, error) {
	m := new(CompanyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recruiterClient) ClearCompanies(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/recruiter.Recruiter/ClearCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecruiterServer is the server API for Recruiter service.
type RecruiterServer interface {
	// Creates a company from a company message. Returns created company with
	// ok response
	CreateCompany(context.Context, *Company) (*CompanyResponse, error)
	// Reads a company, queried by company code. Returns company with ok response
	ReadCompany(context.Context, *CompanyRequest) (*CompanyResponse, error)
	// Updates a company's name, number of openings, or brokerage. Returns the
	// updated company
	UpdateCompany(context.Context, *CompanyRequest) (*CompanyResponse, error)
	// Deletes a company queried by id and returns the deleted company
	DeleteCompany(context.Context, *CompanyRequest) (*CompanyResponse, error)
	/// Lists all the registered companies. Returns a stream of companies
	ListCompanies(*Void, Recruiter_ListCompaniesServer) error
	/// Removes all registered companies
	ClearCompanies(context.Context, *Void) (*Void, error)
}

// UnimplementedRecruiterServer can be embedded to have forward compatible implementations.
type UnimplementedRecruiterServer struct {
}

func (*UnimplementedRecruiterServer) CreateCompany(ctx context.Context, req *Company) (*CompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (*UnimplementedRecruiterServer) ReadCompany(ctx context.Context, req *CompanyRequest) (*CompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCompany not implemented")
}
func (*UnimplementedRecruiterServer) UpdateCompany(ctx context.Context, req *CompanyRequest) (*CompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (*UnimplementedRecruiterServer) DeleteCompany(ctx context.Context, req *CompanyRequest) (*CompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (*UnimplementedRecruiterServer) ListCompanies(req *Void, srv Recruiter_ListCompaniesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (*UnimplementedRecruiterServer) ClearCompanies(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCompanies not implemented")
}

func RegisterRecruiterServer(s *grpc.Server, srv RecruiterServer) {
	s.RegisterService(&_Recruiter_serviceDesc, srv)
}

func _Recruiter_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruiterServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recruiter.Recruiter/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruiterServer).CreateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recruiter_ReadCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruiterServer).ReadCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recruiter.Recruiter/ReadCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruiterServer).ReadCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recruiter_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruiterServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recruiter.Recruiter/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruiterServer).UpdateCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recruiter_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruiterServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recruiter.Recruiter/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruiterServer).DeleteCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recruiter_ListCompanies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecruiterServer).ListCompanies(m, &recruiterListCompaniesServer{stream})
}

type Recruiter_ListCompaniesServer interface {
	Send(*CompanyResponse) error
	grpc.ServerStream
}

type recruiterListCompaniesServer struct {
	grpc.ServerStream
}

func (x *recruiterListCompaniesServer) Send(m *CompanyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Recruiter_ClearCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecruiterServer).ClearCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recruiter.Recruiter/ClearCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecruiterServer).ClearCompanies(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recruiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recruiter.Recruiter",
	HandlerType: (*RecruiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _Recruiter_CreateCompany_Handler,
		},
		{
			MethodName: "ReadCompany",
			Handler:    _Recruiter_ReadCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _Recruiter_UpdateCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _Recruiter_DeleteCompany_Handler,
		},
		{
			MethodName: "ClearCompanies",
			Handler:    _Recruiter_ClearCompanies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCompanies",
			Handler:       _Recruiter_ListCompanies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/recruiter.proto",
}
