syntax = "proto3";
package recruiter;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Simple demo CRUD app for companies hiring on Kalibrr platform";
		version: "1.0";
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";

    responses: {
		key: "400";
		value: {
			description: "Returned when the ID does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
    }

    responses: {
        key: "502";
        value: {
            description: "Server Error";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
    responses: {
        key: "503";
        value: {
            description: "Bad Gateway";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }

};

/**
 * Defines the services a client can use to register for housing.
 *
 * RPC Methods:
 *
 *      CreateCompany   -   adds a new student registration
 *
 *      ReadCompany     -   returns a single student from database given an
 *                          id number
 *
 *      UpdateCompany   -   updates either the name or dorm of a student given
 *                          an id number request
 *
 *      DeleteCompany   -   deletes a student given an id number request
 *
 *      ListCompany     -   lists all the students in the database
 *
 *      ClearCompanys   -   clears student registrations (not for client use)
 */
service Registration {

    /// Creates a company from a company message. Returns created company with
    // ok response
    rpc CreateCompany(Company) returns (CompanyResponse){
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Description Test";
            summary: "Summary: test";
            responses: {
                key: "200";
                value: {
                    description: "Overwrites YEET";
                    schema: {
                        json_schema: {
                            type: STRING;
                        }
                    }
                }
            }
        };

    };

    /// Reads a company, queried by company code. Returns company with ok response
    rpc ReadCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            get: "/{companyCode}"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Company with {companyCode} does not exist!";
            summary: "Company is not in the database. Cannot delete";
            responses: {
                key: "400";
                value: {
                    description: "Overwrites default when deleting";
                    schema: {
                        json_schema: {
                            type: STRING;
                        }
                    }
                }
            }
        };

    };

    /// Updates a student's name or dorm. Specified by `changeDorm` boolean.
    // Returns new student.
    rpc UpdateCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            put: "update/{companyCode}"
            body: "*"
        };
    };

    /// Deletes a registration queried by id and returns the deleted student
    rpc DeleteCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            delete: "/students/delete/{companyCode}"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Company with {companyCode} does not exist!";
            summary: "ID has not been registered for housing. Cannot delete";
            responses: {
                key: "400";
                value: {
                    description: "Overwrites default when deleting";
                    schema: {
                        json_schema: {
                            type: STRING;
                        }
                    }
                }
            }
        };
    };

    /// Lists all the registered companies. Returns a stream of companies
    rpc ListCompanies(Void) returns (stream CompanyResponse){
        option (google.api.http) = {
            get: "/companies"
        };
    };

    /// Removes all registered companies
    rpc ClearCompanys(Void) returns (Void){
        option (google.api.http) = {
            delete: "/clear"
        };
    };
}

/**
 * Empty message for rpc's that require no request (clear and list)
 */
message Void {}

/**
 * Represents a company with a name, code, numer of job openings,
 *  and is_brokerage field
 */
message Company {
    
    /* unique id for each company */
    int32 companyCode = 1;

    /* name of the company */
    string companyName = 2;

    /* how many jobs are available */
    int32 numOpenings = 3;

    /* determines if the company is brokerage */
    bool isBrokerage = 4;
}

/**
 * A request made by a client, specifiying id of a student. `changeDorm` and 
 * `new` are set when updating a student.
 */
message CompanyRequest {

    /* Unique id student query */
    int32 companyCode = 1;

    /* True if the client requests to change the dorm, false to change name */
    bool changeName = 2;

    /* The new number of openings */
    int32 numOpenings = 3;

    /* The updated name */
    string newName = 4;
}

/**
 * A response sent by a server, returning a student message and a boolean field
 * indicating a successful transaction
 */
message CompanyResponse{

    /**
     * The deleted, created, or retrieved student. If response is not `ok`,
     * id = 0, name = dorm = "ERROR"
     */
    Company company = 1;

    /* True if transaction is successful, false otherwise */
    bool ok = 2;
}
