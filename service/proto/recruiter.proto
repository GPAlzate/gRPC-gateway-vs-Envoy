syntax = "proto3";
package recruiter;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Simple demo CRUD app for companies hiring on Kalibrr platform"
		version: "1.0"
    }
    schemes: HTTP
    consumes: "application/json"
    produces: "application/json"

    responses: {
		key: "400"
		value: {
			description: "Returned when the ID does not exist."
			schema: {
				json_schema: {
					type: STRING
				}
			}
		}
    }

    responses: {
        key: "502"
        value: {
            description: "Server Error"
            schema: {
                json_schema: {
                    type: STRING
                }
            }
        }
    }
    responses: {
        key: "503"
        value: {
            description: "Bad Gateway"
            schema: {
                json_schema: {
                    type: STRING
                }
            }
        }
    }

};

/**
 * Defines the services a client can use to use Kalibrr's job platform
 *
 * RPC Methods:
 *
 *      CreateCompany   -   adds a new company
 *
 *      ReadCompany     -   returns a single company queried by company code
 *
 *      UpdateCompany   -   updates the information of a company (except for code)
 *
 *      DeleteCompany   -   deletes a company
 *
 *      ListCompany     -   lists all the companies in the database
 *
 *      ClearCompanies  -   clears company registrations (not for client use)
 */
service Recruiter {

    // Creates a company from a company message. Returns created company with
    // ok response
    rpc CreateCompany(Company) returns (CompanyResponse){
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Description Test"
            summary: "Summary: test"
            responses: {
                key: "200"
                value: {
                    description: "Overwrites the defined 200"
                    schema: {
                        json_schema: {
                            type: STRING
                        }
                    }
                }
            }
        };

    };

    // Reads a company, queried by company code. Returns company with ok response
    rpc ReadCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            get: "/companies/{companyCode}"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Company with {companyCode} does not exist!"
            summary: "Company is not in the database. Cannot delete"
            responses: {
                key: "400"
                value: {
                    description: "Overwrites default when deleting"
                    schema: {
                        json_schema: {
                            type: STRING
                        }
                    }
                }
            }
        };

    };

    // Updates a company's name, number of openings, or brokerage. Returns the
    // updated company
    rpc UpdateCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            put: "/update/{companyCode}"
            body: "*"
        };
    };

    // Deletes a company queried by id and returns the deleted company
    rpc DeleteCompany(CompanyRequest) returns (CompanyResponse){
        option (google.api.http) = {
            delete: "/delete/{companyCode}"
        };

        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Company with {companyCode} does not exist!"
            summary: "ID has not been registered for housing. Cannot delete"
            responses: {
                key: "400"
                value: {
                    description: "Overwrites default when deleting"
                    schema: {
                        json_schema: {
                            type: STRING
                        }
                    }
                }
            }
        };
    };

    /// Lists all the registered companies. Returns a stream of companies
    rpc ListCompanies(Void) returns (stream CompanyResponse){
        option (google.api.http) = {
            get: "/companies"
        };
    };

    /// Removes all registered companies
    rpc ClearCompanies(Void) returns (Void){
        option (google.api.http) = {
            delete: "/clear"
        };
    };
}

/**
 * Empty message for rpc's that require no request (clear and list)
 */
message Void {}

/**
 * Represents a company with a name, code, number of job openings,
 * and brokerage status
 */
message Company {
    
    /* unique id for each company */
    int32 companyCode = 1;

    /* name of the company */
    string companyName = 2;

    /* how many jobs are available */
    int32 numOpenings = 3;

    /* determines if the company is brokerage */
    bool isBrokerage = 4;
}

/**
 * A request made by a client who specifies a unique company code. Fields 2-4
 * are set when updating a company's details.
 */
message CompanyRequest {

    /* unique id for each company */
    int32 companyCode = 1;

    /* name of the company */
    string companyName = 2;

    /* how many jobs are available */
    int32 numOpenings = 3;

    /* determines if the company is brokerage */
    bool isBrokerage = 4;

    /* True if transaction is successful, false otherwise */
    bool ok = 5;
}

/**
 * A response sent by a server, returning a `Company` message and a boolean field
 * indicating a successful transaction
 */
message CompanyResponse{

    /* The deleted, created, or retrieved company */
    Company company = 1;

    /* True if transaction is successful, false otherwise */
    bool ok = 2;
}
