from concurrent import futures
from app import config
from proto import recruiter_pb2, recruiter_pb2_grpc
import threading

import time, math, logging
import grpc
import psycopg2
import sys, random, string

_ONE_DAY_IN_SECONDS = 60 * 60 * 24
_CHARS = string.ascii_letters

_lock = threading.Lock()

def create_db():
    """ Initializes the postgres database.

    Called when the server is run in `__init__()`, where the company table is
    created if it doesnt yet exist
    """
    try:
        conn = psycopg2.connect(
                user = config.USER,
                password = config.PASSWORD,
                host = config.HOST,
                port = config.PORT,
                database = config.DATABASE
                )

        print(f"Connect to {config.DATABASE} successful")
        print(sys.version)
        return conn

    except:
        print("Database connection failure: Quitting...")
        return None

class RecruiterServicer(recruiter_pb2_grpc.RecruiterServicer): 
    """ Implements the recruiter service methods.

    The service methods are defined defined in the `RecruiterServicer`
    class generated by the `protoc` compiler. Also initializes the postgres
    database to be used by the server.

    Attributes:
        cur     - the cursor of the database for executing Postgres commands
        db      - the postgres database where companies are stored

    """

    def __init__(self):

        # access the postgres database. Terminate if there's an error
        self.db = create_db()
        if self.db is None:
            return

        # create the table of companies if it doesnt exist yet
        self.cur = self.db.cursor()
        self.cur.execute("CREATE TABLE IF NOT EXISTS companies("
                        "companyCode INT PRIMARY KEY,"
                        "companyName VARCHAR (255) NOT NULL,"
                        "numOpenings INT NOT NULL CHECK(numOpenings > 0),"
                        "isBrokerage BOOLEAN NOT NULL"
                        ")")

    def CreateCompany(self, request, context):
        """ Registers a company in the Kalibrr database.

        Creates a company with a code, name, number of openings, and a brokerage
        indicator and adds it to the database. If the unique company code is
        already in use, a gRPC error is set.

        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object with  a code, name, number
                          of openings, and brokerage indicator.
        """
        try:
            #make new company request
            code = request.companyCode
            name = request.companyName
            ops = request.numOpenings
            brok = request.isBrokerage

            company = recruiter_pb2.Company(companyCode = code,
                    companyName = name, numOpenings = ops, isBrokerage = brok)

            #insert new company in a thread safe manner
            with _lock:
                try:
                    self.cur.execute("INSERT INTO companies (companyCode, companyName, "
                                        "numOpenings, isBrokerage) "
                                        f"VALUES ({code}, {name}, {ops}, {brok});")
                except psycopg2.IntegrityError:
                    #error if the code is already in use
                    self.db.rollback()
                    context.set_details(f"Code {code} already in use!")
                    context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
                    return recruiter_pb2.CompanyResponse(company=company, ok=0)
                else:
                    self.db.commit()
                    return recruiter_pb2.CompanyResponse(company=company, ok=1)
        except Exception as e:
            print(str(e))
    
    def ReadCompany(self, request, context):
        """ Gets a company from the Kalibrr database, queried by a unique company code.

        Only used by update and delete methods to check if the company exists in
        the database. Returns an invalid request to the client if it doesn't exist.

        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object with a code to see if a
                          company exists
        """
        #get from database via helper method
        response = self.CompanyOperation(request=request, delete=False)
        code = response.companyCode

        if not response.ok:
            return self.SubmitResponse(code, response=None, context=context)

        response = (response.companyCode, response.companyName,
                    response.numOpenings, response.isBrokerage)

        return self.SubmitResponse(code, response, context)

    def UpdateCompany(self, request, context):
        """ Allows changes to be made to the fields of a registered company.

        Can change the company code, name, the number of job openings, and
        brokerage indicator. The updated `Company` object is stored in the
        `response` variable, which is used by the helper method `SubmitResponse`
        to send a response back to the client.

        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object with a code, name, number
                          of openings, and brokerage indicator.
        """
        try:
            code = request.companyCode
            name = request.companyName
            ops = request.numOpenings
            brok = request.isBrokerage

            # can change all fields
            setNewFields = "SET "
            if name:
                setNewFields += f"companyName={name},"
            if ops:
                setNewFields += f"numOpenings={ops},"
            if brok is not None:
                setNewFields += f"isBrokerage={brok}"

            set_new = f"UPDATE companies {setNewFields.rstrip(',')} WHERE companyCode={code} RETURNING *"

            # delegate to helper method to send response
            with _lock:
                self.cur.execute(set_new)
                response = self.cur.fetchone()
                return self.SubmitResponse(code, response, context)
        except Exception as e:
            print(str(e))

    def DeleteCompany(self, request, context):
        """ Removes a company from the database.

        Delegates to `SubmitResponse` to send response back to client.

        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object with a code to locate and
                          delete a company
        """

        #delete and return
        response = self.CompanyOperation(request=request, delete=True)
        code = response.companyCode

        if not response.ok:
            return self.SubmitResponse(code=code, response=None, context=context)

        response = (response.companyCode, response.companyName,
                    response.numOpenings, response.isBrokerage)
        return self.SubmitResponse(code, response, context)

    def ListCompanies(self, request, context):
        """ Displays all the companies currently in the database.

        `yield`s each company as a `CompanyResponse` object to return a generator,
        the responses generated by which are sent through an HTTP/2.0 stream.
        If the client operates on HTTP/1.x, the responses are sent through
        chunked transfer encoding.

        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object; only exists because it's
                          specified by the `protoc` compiler. Otherwise, it's
                          not needed in this particular method
        """
        try:
            with _lock:
                self.cur.execute("SELECT * FROM companies;")
                rows = self.cur.fetchall()
                for row in rows:
                    company = recruiter_pb2.Company(companyCode=row[0], companyName=row[1],
                                                numOpenings=row[2], isBrokerage=row[3])
                    yield recruiter_pb2.CompanyResponse(company=company, ok=1)
        except Exception as e:
            print(str(e))

    def CompanyOperation(self, request, delete):
        """ Helper method gets or deletes one company from the database.

        Args:
            request     - a `CompanyRequest` object with a specified unique code
            delete      - boolean; will execute DELETE if true, SELECT otherwise
        Returns:
            a company object if successful, throws an exception othewise
        """
        try:
            # perform either a delete or get operation
            if(delete):
                operation = "DELETE FROM companies WHERE " \
                                f"companyCode={request.companyCode} RETURNING *;"
            else:
                operation = "SELECT * FROM companies WHERE " \
                                f"companyCode={request.companyCode};"

            with _lock:
                self.cur.execute(operation)
                entry = self.cur.fetchone()

                #returns with company code 0 by default
                if entry is None:
                    return recruiter_pb2.CompanyRequest(companyCode=request.companyCode, ok=0)
                return recruiter_pb2.CompanyRequest(companyCode=entry[0], companyName=entry[1],
                                            numOpenings=entry[2], isBrokerage=entry[3], ok=1)
        except Exception as e:
            print(str(e))

    def ClearCompanies(self, request, context):
        """ Clears the entire database of companies.
        
        For testing purposes only, called using an HTTP request: DELETE /clear
            
        Args:
            context     - gRPC context object for method implementations
            request     - a `CompanyRequest` object; only exists because it's
                          specified by the `protoc` compiler. Otherwise, it's
                          not needed in this particular method
        Returns:
            an empty void message
        """
        self.cur.execute("TRUNCATE companies;")
        self.db.commit()
        return recruiter_pb2.Void()

    def SubmitResponse(self, code, response, context):
        """ Helper method sends response for many of the gRPC methods.

        Displays a 400 response if the request is invalid, otherwise sends a
        valid `CompanyResponse` with an ok message.

        Args:
            code        - the code of the company on which an operation was
                          performed
            response    - a `Company` object from which a `CompanyResponse` is
                          constructed
        Returns:
            a `CompanyResponse` with the created, updated, or delete company if
            successful; an empty company otherwise
        """
        #400 response
        if response is None:
            context.set_details(f"Company with code {code} does not exist!")
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            company = recruiter_pb2.Company()
            return recruiter_pb2.CompanyResponse(company=company, ok=0)

        self.db.commit()
        company = recruiter_pb2.Company(companyCode=response[0],
                                        companyName=response[1],
                                        numOpenings=response[2],
                                        isBrokerage=response[3])
        return recruiter_pb2.CompanyResponse(company=company, ok=1)


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    recruiter_pb2_grpc.add_RecruiterServicer_to_server(
            RecruiterServicer(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    try:
        while 1:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)

if __name__ == '__main__':
    logging.basicConfig()
    serve()

