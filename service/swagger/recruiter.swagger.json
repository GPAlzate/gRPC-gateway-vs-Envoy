{
  "swagger": "2.0",
  "info": {
    "title": "Simple demo CRUD app for companies hiring on Kalibrr platform",
    "version": "1.0"
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/clear": {
      "delete": {
        "summary": "/ Removes all registered companies",
        "operationId": "ClearCompanies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/recruiterVoid"
            }
          },
          "400": {
            "description": "Returned when the ID does not exist.",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": [
          "Recruiter"
        ]
      }
    },
    "/companies": {
      "get": {
        "summary": "/ Lists all the registered companies. Returns a stream of companies",
        "operationId": "ListCompanies",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/recruiterCompanyResponse"
            }
          },
          "400": {
            "description": "Returned when the ID does not exist.",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": [
          "Recruiter"
        ]
      }
    },
    "/delete/{companyCode}": {
      "delete": {
        "summary": "ID has not been registered for housing. Cannot delete",
        "description": "Company with {companyCode} does not exist!",
        "operationId": "DeleteCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/recruiterCompanyResponse"
            }
          },
          "400": {
            "description": "Overwrites default when deleting",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "companyCode",
            "description": "unique id for each company",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "companyName",
            "description": "name of the company.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "numOpenings",
            "description": "how many jobs are available.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isBrokerage",
            "description": "determines if the company is brokerage.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "ok",
            "description": "True if transaction is successful, false otherwise.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Recruiter"
        ]
      }
    },
    "/register": {
      "post": {
        "summary": "Summary: test",
        "description": "Description Test",
        "operationId": "CreateCompany",
        "responses": {
          "200": {
            "description": "Overwrites YEET",
            "schema": {
              "format": "string"
            }
          },
          "400": {
            "description": "Returned when the ID does not exist.",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/recruiterCompany"
            }
          }
        ],
        "tags": [
          "Recruiter"
        ]
      }
    },
    "/update/{companyCode}": {
      "put": {
        "summary": "Updates a company's name, number of openings, or brokerage. Returns the\nupdated company",
        "operationId": "UpdateCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/recruiterCompanyResponse"
            }
          },
          "400": {
            "description": "Returned when the ID does not exist.",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "companyCode",
            "description": "unique id for each company",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/recruiterCompanyRequest"
            }
          }
        ],
        "tags": [
          "Recruiter"
        ]
      }
    },
    "/{companyCode}": {
      "get": {
        "summary": "Company is not in the database. Cannot delete",
        "description": "Company with {companyCode} does not exist!",
        "operationId": "ReadCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/recruiterCompanyResponse"
            }
          },
          "400": {
            "description": "Overwrites default when deleting",
            "schema": {
              "format": "string"
            }
          },
          "502": {
            "description": "Server Error",
            "schema": {
              "format": "string"
            }
          },
          "503": {
            "description": "Bad Gateway",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "companyCode",
            "description": "unique id for each company",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "companyName",
            "description": "name of the company.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "numOpenings",
            "description": "how many jobs are available.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isBrokerage",
            "description": "determines if the company is brokerage.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "ok",
            "description": "True if transaction is successful, false otherwise.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Recruiter"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "recruiterCompany": {
      "type": "object",
      "properties": {
        "companyCode": {
          "type": "integer",
          "format": "int32",
          "title": "unique id for each company"
        },
        "companyName": {
          "type": "string",
          "title": "name of the company"
        },
        "numOpenings": {
          "type": "integer",
          "format": "int32",
          "title": "how many jobs are available"
        },
        "isBrokerage": {
          "type": "boolean",
          "format": "boolean",
          "title": "determines if the company is brokerage"
        }
      },
      "title": "*\nRepresents a company with a name, code, number of job openings,\nand brokerage status"
    },
    "recruiterCompanyRequest": {
      "type": "object",
      "properties": {
        "companyCode": {
          "type": "integer",
          "format": "int32",
          "title": "unique id for each company"
        },
        "companyName": {
          "type": "string",
          "title": "name of the company"
        },
        "numOpenings": {
          "type": "integer",
          "format": "int32",
          "title": "how many jobs are available"
        },
        "isBrokerage": {
          "type": "boolean",
          "format": "boolean",
          "title": "determines if the company is brokerage"
        },
        "ok": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if transaction is successful, false otherwise"
        }
      },
      "description": "*\nA request made by a client who specifies a unique company code. Fields 2-4\nare set when updating a company's details."
    },
    "recruiterCompanyResponse": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/recruiterCompany",
          "title": "The deleted, created, or retrieved company"
        },
        "ok": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if transaction is successful, false otherwise"
        }
      },
      "title": "*\nA response sent by a server, returning a `Company` message and a boolean field\nindicating a successful transaction"
    },
    "recruiterVoid": {
      "type": "object",
      "title": "*\nEmpty message for rpc's that require no request (clear and list)"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "recruiterCompanyResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/recruiterCompanyResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of recruiterCompanyResponse"
    }
  }
}
